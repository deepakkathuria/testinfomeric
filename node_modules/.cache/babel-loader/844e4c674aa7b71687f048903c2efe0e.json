{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useContext } from \"react\";\nimport { DonutChartContext } from \"./DonutChart\";\n\nconst LegendItem = _ref => {\n  let {\n    item\n  } = _ref;\n  const {\n    className,\n    graphWidth,\n    width\n  } = useContext(DonutChartContext);\n  const {\n    classNames,\n    clickHandlers,\n    index,\n    isEmpty,\n    label,\n    value,\n    ...restItemRenderProps\n  } = item;\n  const classSuffix = \"legend-item\";\n  const legendWidth = width - graphWidth;\n  const sqUnit = legendWidth / 10;\n  const yOffset = 1.5;\n  return /*#__PURE__*/React.createElement(\"g\", _extends({}, clickHandlers, {\n    className: `${className}-${classSuffix} ${classNames}`,\n    transform: `translate(${width - legendWidth}, ${index * yOffset * sqUnit})`\n  }), /*#__PURE__*/React.createElement(\"rect\", _extends({}, restItemRenderProps, {\n    height: sqUnit,\n    width: sqUnit\n  })), /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-${classSuffix}-label ${classNames}`,\n    dy: \".35em\",\n    x: sqUnit + sqUnit / 2,\n    y: sqUnit / 2\n  }, `${label} - ${value}`));\n};\n\nexport default LegendItem;","map":{"version":3,"sources":["/home/cognitensor/Desktop/Personal/Rekor/Front/node_modules/react-donut-chart/dist/LegendItem.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useContext","DonutChartContext","LegendItem","item","className","graphWidth","width","classNames","clickHandlers","index","isEmpty","label","value","restItemRenderProps","classSuffix","legendWidth","sqUnit","yOffset","createElement","transform","height","dy","x","y"],"mappings":"AAAA,SAASA,QAAT,GAAmB;AAACA,EAAAA,QAAQ,GAACC,MAAM,CAACC,MAAP,IAAe,UAASC,MAAT,EAAgB;AAAC,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACC,SAAS,CAACC,MAAxB,EAA+BF,CAAC,EAAhC,EAAmC;AAAC,UAAIG,MAAM,GAACF,SAAS,CAACD,CAAD,CAApB;;AAAwB,WAAI,IAAII,GAAR,IAAeD,MAAf,EAAsB;AAAC,YAAGN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA4CC,GAA5C,CAAH,EAAoD;AAACL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAYD,MAAM,CAACC,GAAD,CAAlB;AAAwB;AAAC;AAAC;;AAAA,WAAOL,MAAP;AAAc,GAAzN;;AAA0N,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAoBP,SAApB,CAAP;AAAsC;;AAAA,OAAOQ,KAAP,IAAcC,UAAd,QAA6B,OAA7B;AAAqC,SAAOC,iBAAP,QAA6B,cAA7B;;AAA4C,MAAMC,UAAU,GAAC,QAAU;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAAC,QAAK;AAACC,IAAAA,SAAD;AAAWC,IAAAA,UAAX;AAAsBC,IAAAA;AAAtB,MAA6BN,UAAU,CAACC,iBAAD,CAA5C;AAAgE,QAAK;AAACM,IAAAA,UAAD;AAAYC,IAAAA,aAAZ;AAA0BC,IAAAA,KAA1B;AAAgCC,IAAAA,OAAhC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA,KAA9C;AAAoD,OAAGC;AAAvD,MAA4EV,IAAjF;AAAsF,QAAMW,WAAW,GAAC,aAAlB;AAAgC,QAAMC,WAAW,GAACT,KAAK,GAACD,UAAxB;AAAmC,QAAMW,MAAM,GAACD,WAAW,GAAC,EAAzB;AAA4B,QAAME,OAAO,GAAC,GAAd;AAAkB,SAAM,aAAalB,KAAK,CAACmB,aAAN,CAAoB,GAApB,EAAwBhC,QAAQ,CAAC,EAAD,EAAIsB,aAAJ,EAAkB;AAACJ,IAAAA,SAAS,EAAE,GAAEA,SAAU,IAAGU,WAAY,IAAGP,UAAW,EAArD;AAAuDY,IAAAA,SAAS,EAAE,aAAYb,KAAK,GAACS,WAAY,KAAIN,KAAK,GAACQ,OAAN,GAAcD,MAAO;AAAzH,GAAlB,CAAhC,EAAgL,aAAajB,KAAK,CAACmB,aAAN,CAAoB,MAApB,EAA2BhC,QAAQ,CAAC,EAAD,EAAI2B,mBAAJ,EAAwB;AAACO,IAAAA,MAAM,EAACJ,MAAR;AAAeV,IAAAA,KAAK,EAACU;AAArB,GAAxB,CAAnC,CAA7L,EAAuR,aAAajB,KAAK,CAACmB,aAAN,CAAoB,MAApB,EAA2B;AAACd,IAAAA,SAAS,EAAE,GAAEA,SAAU,IAAGU,WAAY,UAASP,UAAW,EAA3D;AAA6Dc,IAAAA,EAAE,EAAC,OAAhE;AAAwEC,IAAAA,CAAC,EAACN,MAAM,GAACA,MAAM,GAAC,CAAxF;AAA0FO,IAAAA,CAAC,EAACP,MAAM,GAAC;AAAnG,GAA3B,EAAkI,GAAEL,KAAM,MAAKC,KAAM,EAArJ,CAApS,CAAnB;AAAgd,CAAnvB;;AAAovB,eAAeV,UAAf","sourcesContent":["function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}import React,{useContext}from\"react\";import{DonutChartContext}from\"./DonutChart\";const LegendItem=({item})=>{const{className,graphWidth,width}=useContext(DonutChartContext);const{classNames,clickHandlers,index,isEmpty,label,value,...restItemRenderProps}=item;const classSuffix=\"legend-item\";const legendWidth=width-graphWidth;const sqUnit=legendWidth/10;const yOffset=1.5;return/*#__PURE__*/React.createElement(\"g\",_extends({},clickHandlers,{className:`${className}-${classSuffix} ${classNames}`,transform:`translate(${width-legendWidth}, ${index*yOffset*sqUnit})`}),/*#__PURE__*/React.createElement(\"rect\",_extends({},restItemRenderProps,{height:sqUnit,width:sqUnit})),/*#__PURE__*/React.createElement(\"text\",{className:`${className}-${classSuffix}-label ${classNames}`,dy:\".35em\",x:sqUnit+sqUnit/2,y:sqUnit/2},`${label} - ${value}`))};export default LegendItem;"]},"metadata":{},"sourceType":"module"}