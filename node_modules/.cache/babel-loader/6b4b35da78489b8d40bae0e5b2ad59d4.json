{"ast":null,"code":"var _jsxFileName = \"D:\\\\oinfo\\\\rekor_layout\\\\Rekor\\\\Front\\\\src\\\\components\\\\Login\\\\Loginc.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Header from 'semantic-ui-react/dist/commonjs/elements/Header';\nimport Container from 'semantic-ui-react/dist/commonjs/elements/Container';\nimport Segment from 'semantic-ui-react/dist/commonjs/elements/Segment';\nimport Button from 'semantic-ui-react/dist/commonjs/elements/Button';\nimport Form from 'semantic-ui-react/dist/commonjs/collections/Form';\nimport Grid from 'semantic-ui-react/dist/commonjs/collections/Grid';\nimport { Redirect } from 'react-router-dom';\nimport Axios from 'axios';\nimport PropTypes from 'prop-types';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { connect } from 'react-redux'; // import url from '../../urls';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddUser = _ref => {\n  _s();\n\n  let {\n    user\n  } = _ref;\n  // email, password, confirmPassword to store the data received from their\n  // respective input fields\n  // redirectTo to control where this page will redirect to\n  // error to verify if requests are received with error response or not\n  // message to control the message to be shown to user\n  // requesting to control and show the status of requests\n  const [variables, setVariables] = useState({\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [requesting, toggleRequesting] = useState(0); // handle change in variables and storing them\n\n  const handleChange = (event, target) => {\n    const {\n      name,\n      value\n    } = target;\n    setVariables({ ...variables,\n      [name]: value\n    });\n  }; // Method to check if password supplied by user confirms by our rules\n\n\n  const passwordCheck = password => {\n    // checking if password is not null and is longer than 8 characters\n    if (password.length < 8) {\n      return false;\n    } // matching if password contains a number and then checking if it also\n    // contains a character\n\n\n    if (password.match(/[0-9]+/g) !== null && password.match(/[a-zA-Z]+/g) !== null) {\n      return true;\n    }\n\n    return false;\n  }; // Method to check if all signup parameters are correct and then\n  //   const handleSubmit = (event) => {\n  //     event.preventDefault();\n  //     const { email, password, confirmPassword } = variables;\n  //     // validate email and password\n  //     if (!email || !password) {\n  //       toast.error('Invalid email or password');\n  //       toggleRequesting(0);\n  //       return;\n  //     }\n  //     if (!passwordCheck(password)) {\n  //       toast.warning('Password should contain at least one character and one number. They should also at least have 8 characters');\n  //       toggleRequesting(0);\n  //       return;\n  //     }\n  //     if (password !== confirmPassword) {\n  //       toast.error(`Passwords don${\"'\"}t match. Please check`);\n  //       toggleRequesting(0);\n  //       return;\n  //     }\n  //     if (requesting === 1) {\n  //       return;\n  //     }\n  //     toggleRequesting(1);\n  //     const options = {\n  //       url: `${url.CLIENT_USER_URL}/auth/create/newuser`,\n  //       method: 'post',\n  //       data: { email, password },\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         Authorization: `Bearer ${window.localStorage.authToken}`,\n  //       },\n  //     };\n  //     // reqeust for sign up to API\n  //     Axios(options)\n  //       .then(() => {\n  //         toast.success('User created');\n  //         toggleRequesting(0);\n  //       }).catch((err) => {\n  //         console.log(err);\n  //         toast.error('Error');\n  //         toggleRequesting(0);\n  //       });\n  //   };\n  //   if (!user) return <Redirect to=\"/login\" />;\n  //   if (user && user.roles !== 'admin') return <Redirect to=\"/\" />;\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      verticalAlign: \"middle\",\n      className: \"login-form\",\n      centered: true,\n      columns: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          className: \"large\",\n          size: \"large\" //   onSubmit={handleSubmit}\n          ,\n          children: /*#__PURE__*/_jsxDEV(Segment, {\n            stacked: true,\n            children: [/*#__PURE__*/_jsxDEV(Header, {\n              as: \"h2\",\n              color: \"blue\",\n              textAlign: \"center\",\n              content: \"Add User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              className: \"column\",\n              children: /*#__PURE__*/_jsxDEV(Form.Input, {\n                label: \"Enter email address\",\n                name: \"email\",\n                type: \"email\",\n                autoComplete: \"email\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              className: \"column\",\n              children: /*#__PURE__*/_jsxDEV(Form.Input, {\n                label: \"Enter password\",\n                type: \"password\",\n                name: \"password\",\n                autoComplete: \"new-password\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              className: \"column\",\n              children: /*#__PURE__*/_jsxDEV(Form.Input, {\n                label: \"Enter password again\",\n                type: \"password\",\n                name: \"confirmPassword\",\n                autoComplete: \"new-password\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"auth-button\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                content: \"Submit\",\n                basic: true,\n                color: \"blue\",\n                loading: !!requesting\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}; // AddUser.propTypes = {\n//   user: PropTypes.shape({\n//     roles: PropTypes.string,\n//   }),\n// };\n// AddUser.defaultProps = {\n//   user: null,\n// };\n// const mapStateToProps = (state) => ({\n//   user: state.user.user,\n// });\n\n\n_s(AddUser, \"5+Kos1QoF9gNcDczxq+J1P16f8c=\");\n\n_c = AddUser;\nexport default AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"sources":["D:/oinfo/rekor_layout/Rekor/Front/src/components/Login/Loginc.js"],"names":["React","useState","Header","Container","Segment","Button","Form","Grid","Redirect","Axios","PropTypes","toast","ToastContainer","connect","AddUser","user","variables","setVariables","email","password","confirmPassword","requesting","toggleRequesting","handleChange","event","target","name","value","passwordCheck","length","match"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Header from 'semantic-ui-react/dist/commonjs/elements/Header';\r\nimport Container from 'semantic-ui-react/dist/commonjs/elements/Container';\r\nimport Segment from 'semantic-ui-react/dist/commonjs/elements/Segment';\r\nimport Button from 'semantic-ui-react/dist/commonjs/elements/Button';\r\nimport Form from 'semantic-ui-react/dist/commonjs/collections/Form';\r\nimport Grid from 'semantic-ui-react/dist/commonjs/collections/Grid';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport PropTypes from 'prop-types';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\n// import url from '../../urls';\r\n\r\nconst AddUser = ({ user }) => {\r\n  // email, password, confirmPassword to store the data received from their\r\n  // respective input fields\r\n  // redirectTo to control where this page will redirect to\r\n  // error to verify if requests are received with error response or not\r\n  // message to control the message to be shown to user\r\n  // requesting to control and show the status of requests\r\n  const [variables, setVariables] = useState({\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  });\r\n  const [requesting, toggleRequesting] = useState(0);\r\n\r\n  // handle change in variables and storing them\r\n  const handleChange = (event, target) => {\r\n    const { name, value } = target;\r\n\r\n    setVariables({\r\n      ...variables,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // Method to check if password supplied by user confirms by our rules\r\n  const passwordCheck = (password) => {\r\n    // checking if password is not null and is longer than 8 characters\r\n    if (password.length < 8) {\r\n      return false;\r\n    }\r\n\r\n    // matching if password contains a number and then checking if it also\r\n    // contains a character\r\n    if (password.match(/[0-9]+/g) !== null && password.match(/[a-zA-Z]+/g) !== null) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Method to check if all signup parameters are correct and then\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const { email, password, confirmPassword } = variables;\r\n//     // validate email and password\r\n//     if (!email || !password) {\r\n//       toast.error('Invalid email or password');\r\n//       toggleRequesting(0);\r\n//       return;\r\n//     }\r\n\r\n//     if (!passwordCheck(password)) {\r\n//       toast.warning('Password should contain at least one character and one number. They should also at least have 8 characters');\r\n//       toggleRequesting(0);\r\n//       return;\r\n//     }\r\n\r\n//     if (password !== confirmPassword) {\r\n//       toast.error(`Passwords don${\"'\"}t match. Please check`);\r\n//       toggleRequesting(0);\r\n//       return;\r\n//     }\r\n\r\n//     if (requesting === 1) {\r\n//       return;\r\n//     }\r\n\r\n//     toggleRequesting(1);\r\n\r\n//     const options = {\r\n//       url: `${url.CLIENT_USER_URL}/auth/create/newuser`,\r\n//       method: 'post',\r\n//       data: { email, password },\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${window.localStorage.authToken}`,\r\n//       },\r\n//     };\r\n\r\n//     // reqeust for sign up to API\r\n//     Axios(options)\r\n//       .then(() => {\r\n//         toast.success('User created');\r\n//         toggleRequesting(0);\r\n//       }).catch((err) => {\r\n//         console.log(err);\r\n//         toast.error('Error');\r\n//         toggleRequesting(0);\r\n//       });\r\n//   };\r\n\r\n//   if (!user) return <Redirect to=\"/login\" />;\r\n//   if (user && user.roles !== 'admin') return <Redirect to=\"/\" />;\r\n\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        verticalAlign=\"middle\"\r\n        className=\"login-form\"\r\n        centered\r\n        columns={2}\r\n      >\r\n        <Grid.Column>\r\n          <Form className=\"large\" size=\"large\" \r\n        //   onSubmit={handleSubmit}\r\n          >\r\n            <Segment stacked>\r\n              <Header as=\"h2\" color=\"blue\" textAlign=\"center\" content=\"Add User\" />\r\n              <Form.Field className=\"column\">\r\n                <Form.Input label=\"Enter email address\" name=\"email\" type=\"email\" autoComplete=\"email\" onChange={handleChange} />\r\n              </Form.Field>\r\n              <Form.Field className=\"column\">\r\n                <Form.Input label=\"Enter password\" type=\"password\" name=\"password\" autoComplete=\"new-password\" onChange={handleChange} />\r\n              </Form.Field>\r\n              <Form.Field className=\"column\">\r\n                <Form.Input label=\"Enter password again\" type=\"password\" name=\"confirmPassword\" autoComplete=\"new-password\" onChange={handleChange} />\r\n              </Form.Field>\r\n              <div id=\"auth-button\">\r\n                <Button type=\"submit\" content=\"Submit\" basic color=\"blue\" loading={!!requesting} />\r\n              </div>\r\n            </Segment>\r\n          </Form>\r\n        </Grid.Column>\r\n      </Grid>\r\n      <ToastContainer position=\"bottom-right\" />\r\n    </Container>\r\n  );\r\n};\r\n\r\n// AddUser.propTypes = {\r\n//   user: PropTypes.shape({\r\n//     roles: PropTypes.string,\r\n//   }),\r\n// };\r\n\r\n// AddUser.defaultProps = {\r\n//   user: null,\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   user: state.user.user,\r\n// });\r\n\r\nexport default AddUser\r\n"]},"metadata":{},"sourceType":"module"}