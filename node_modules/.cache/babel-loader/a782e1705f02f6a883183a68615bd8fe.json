{"ast":null,"code":"import React, { createContext, useEffect, useState } from \"react\";\nimport ArcPath from \"./ArcPath\";\nimport LegendItem from \"./LegendItem\";\nexport const DonutChartContext = /*#__PURE__*/createContext(undefined);\n\nconst DonutChart = _ref => {\n  let {\n    className = \"donutchart\",\n    clickToggle = true,\n    colorFunction = (colors, index) => colors[index % colors.length],\n    colors = [\"#f44336\", \"#e91e63\", \"#9c27b0\", \"#673ab7\", \"#3f51b5\", \"#2196f3\", \"#03a9f4\", \"#00bcd4\", \"#009688\", \"#4caf50\", \"#8bc34a\", \"#cddc39\", \"#ffeb3b\", \"#ffc107\", \"#ff9800\", \"#ff5722\", \"#795548\", \"#607d8b\"],\n    data = [{\n      className: \"\",\n      label: \"\",\n      value: 100,\n      isEmpty: true\n    }],\n    emptyColor = \"#e0e0e0\",\n    emptyOffset = 0.08,\n    formatValues = (value, total) => Number.isNaN(value / total) ? \"--\" : `${(value / total * 100).toFixed(2)}%`,\n    height = 500,\n    innerRadius = 0.7,\n    legend = true,\n    onMouseEnter = item => item,\n    onMouseLeave = item => item,\n    onClick = (item, toggled) => toggled ? item : null,\n    outerRadius = 0.9,\n    selectedOffset = 0.03,\n    strokeColor = \"#212121\",\n    toggledOffset = 0.04,\n    width = 750\n  } = _ref;\n  const [selected, setSelected] = useState(data[0]);\n  const [toggleSelect, setToggleSelect] = useState(false);\n  useEffect(() => {\n    setSelected(data[0]);\n    setToggleSelect(false);\n  }, [data]);\n  const graphWidth = legend ? width * (2 / 3) : width;\n  const total = data.reduce((sum, _ref2) => {\n    let {\n      value\n    } = _ref2;\n    return sum + value;\n  }, 0);\n  const {\n    dataWithRenderProps\n  } = data.reduce((_ref3, item, index) => {\n    let {\n      angle,\n      dataWithRenderProps\n    } = _ref3;\n    const {\n      className,\n      isEmpty,\n      label,\n      value\n    } = item;\n    const isSelected = selected.label === label;\n    const isToggled = isSelected && toggleSelect;\n    return {\n      angle: angle + value / total * 360,\n      dataWithRenderProps: [...dataWithRenderProps, {\n        angle,\n        index,\n        ...item,\n        classNames: `${className ?? \"\"} ${isEmpty ? \"empty\" : \"\"} ${isSelected ? \"selected\" : \"\"} ${isToggled ? \"toggled\" : \"\"}`.trim(),\n        fill: isEmpty ? emptyColor : colorFunction(colors, index),\n        opacity: isSelected && !toggleSelect ? 0.5 : 1,\n        stroke: isEmpty ? emptyColor : strokeColor,\n        clickHandlers: {\n          onClick: () => {\n            if (selected.label === label) {\n              const toggle = clickToggle ? !toggleSelect : false;\n              setSelected(item);\n              setToggleSelect(toggle);\n              onClick(item, toggle);\n            }\n          },\n          onMouseEnter: () => {\n            if (!toggleSelect) {\n              setSelected(item);\n              onMouseEnter(item);\n            }\n          },\n          onMouseLeave: () => {\n            if (!toggleSelect) {\n              onMouseLeave(item);\n            }\n          }\n        }\n      }],\n      total: total + value\n    };\n  }, {\n    angle: 0,\n    dataWithRenderProps: []\n  });\n  return /*#__PURE__*/React.createElement(DonutChartContext.Provider, {\n    value: {\n      className,\n      emptyOffset,\n      graphWidth,\n      innerRadius,\n      outerRadius,\n      selected,\n      selectedOffset,\n      toggledOffset,\n      toggleSelect,\n      total,\n      width\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    className: className,\n    style: {\n      height,\n      width\n    },\n    viewBox: `0 0 ${width} ${height}`\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-arcs`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(ArcPath, {\n    item: item,\n    key: `arcpath${item.index}`\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-innertext`\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-label`,\n    x: graphWidth / 2,\n    y: \"45%\",\n    textAnchor: \"middle\"\n  }, selected.label), /*#__PURE__*/React.createElement(\"text\", {\n    className: `${className}-innertext-value`,\n    x: graphWidth / 2,\n    y: \"60%\",\n    textAnchor: \"middle\"\n  }, formatValues(selected.value, total))), legend && /*#__PURE__*/React.createElement(\"g\", {\n    className: `${className}-legend`\n  }, dataWithRenderProps.map(item => /*#__PURE__*/React.createElement(LegendItem, {\n    key: `legenditem${item.index}`,\n    item: item\n  })))));\n};\n\nexport default DonutChart;","map":{"version":3,"sources":["/home/cognitensor/Desktop/Personal/Rekor/Front/node_modules/react-donut-chart/dist/DonutChart.js"],"names":["React","createContext","useEffect","useState","ArcPath","LegendItem","DonutChartContext","undefined","DonutChart","className","clickToggle","colorFunction","colors","index","length","data","label","value","isEmpty","emptyColor","emptyOffset","formatValues","total","Number","isNaN","toFixed","height","innerRadius","legend","onMouseEnter","item","onMouseLeave","onClick","toggled","outerRadius","selectedOffset","strokeColor","toggledOffset","width","selected","setSelected","toggleSelect","setToggleSelect","graphWidth","reduce","sum","dataWithRenderProps","angle","isSelected","isToggled","classNames","trim","fill","opacity","stroke","clickHandlers","toggle","createElement","Provider","style","viewBox","map","key","x","y","textAnchor"],"mappings":"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","sourcesContent":["import React,{createContext,useEffect,useState}from\"react\";import ArcPath from\"./ArcPath\";import LegendItem from\"./LegendItem\";export const DonutChartContext=/*#__PURE__*/createContext(undefined);const DonutChart=({className=\"donutchart\",clickToggle=true,colorFunction=(colors,index)=>colors[index%colors.length],colors=[\"#f44336\",\"#e91e63\",\"#9c27b0\",\"#673ab7\",\"#3f51b5\",\"#2196f3\",\"#03a9f4\",\"#00bcd4\",\"#009688\",\"#4caf50\",\"#8bc34a\",\"#cddc39\",\"#ffeb3b\",\"#ffc107\",\"#ff9800\",\"#ff5722\",\"#795548\",\"#607d8b\"],data=[{className:\"\",label:\"\",value:100,isEmpty:true}],emptyColor=\"#e0e0e0\",emptyOffset=0.08,formatValues=(value,total)=>Number.isNaN(value/total)?\"--\":`${(value/total*100).toFixed(2)}%`,height=500,innerRadius=0.7,legend=true,onMouseEnter=item=>item,onMouseLeave=item=>item,onClick=(item,toggled)=>toggled?item:null,outerRadius=0.9,selectedOffset=0.03,strokeColor=\"#212121\",toggledOffset=0.04,width=750})=>{const[selected,setSelected]=useState(data[0]);const[toggleSelect,setToggleSelect]=useState(false);useEffect(()=>{setSelected(data[0]);setToggleSelect(false)},[data]);const graphWidth=legend?width*(2/3):width;const total=data.reduce((sum,{value})=>sum+value,0);const{dataWithRenderProps}=data.reduce(({angle,dataWithRenderProps},item,index)=>{const{className,isEmpty,label,value}=item;const isSelected=selected.label===label;const isToggled=isSelected&&toggleSelect;return{angle:angle+value/total*360,dataWithRenderProps:[...dataWithRenderProps,{angle,index,...item,classNames:`${className??\"\"} ${isEmpty?\"empty\":\"\"} ${isSelected?\"selected\":\"\"} ${isToggled?\"toggled\":\"\"}`.trim(),fill:isEmpty?emptyColor:colorFunction(colors,index),opacity:isSelected&&!toggleSelect?0.5:1,stroke:isEmpty?emptyColor:strokeColor,clickHandlers:{onClick:()=>{if(selected.label===label){const toggle=clickToggle?!toggleSelect:false;setSelected(item);setToggleSelect(toggle);onClick(item,toggle)}},onMouseEnter:()=>{if(!toggleSelect){setSelected(item);onMouseEnter(item)}},onMouseLeave:()=>{if(!toggleSelect){onMouseLeave(item)}}}}],total:total+value}},{angle:0,dataWithRenderProps:[]});return/*#__PURE__*/React.createElement(DonutChartContext.Provider,{value:{className,emptyOffset,graphWidth,innerRadius,outerRadius,selected,selectedOffset,toggledOffset,toggleSelect,total,width}},/*#__PURE__*/React.createElement(\"svg\",{className:className,style:{height,width},viewBox:`0 0 ${width} ${height}`},/*#__PURE__*/React.createElement(\"g\",{className:`${className}-arcs`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(ArcPath,{item:item,key:`arcpath${item.index}`}))),/*#__PURE__*/React.createElement(\"g\",{className:`${className}-innertext`},/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-label`,x:graphWidth/2,y:\"45%\",textAnchor:\"middle\"},selected.label),/*#__PURE__*/React.createElement(\"text\",{className:`${className}-innertext-value`,x:graphWidth/2,y:\"60%\",textAnchor:\"middle\"},formatValues(selected.value,total))),legend&&/*#__PURE__*/React.createElement(\"g\",{className:`${className}-legend`},dataWithRenderProps.map(item=>/*#__PURE__*/React.createElement(LegendItem,{key:`legenditem${item.index}`,item:item})))))};export default DonutChart;"]},"metadata":{},"sourceType":"module"}