'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var dateFns = require('date-fns');
var React = require('react');
var React__default = _interopDefault(React);
var locale = require('date-fns/locale');

var MonthlyCalendarContext = /*#__PURE__*/React__default.createContext({});
var useMonthlyCalendar = function useMonthlyCalendar() {
  return React.useContext(MonthlyCalendarContext);
};
var MonthlyCalendar = function MonthlyCalendar(_ref) {
  var locale = _ref.locale,
      currentMonth = _ref.currentMonth,
      onCurrentMonthChange = _ref.onCurrentMonthChange,
      children = _ref.children;
  var monthStart = dateFns.startOfMonth(currentMonth);
  var days = dateFns.eachDayOfInterval({
    start: monthStart,
    end: dateFns.endOfMonth(monthStart)
  });
  return React__default.createElement(MonthlyCalendarContext.Provider, {
    value: {
      days: days,
      locale: locale,
      onCurrentMonthChange: onCurrentMonthChange,
      currentMonth: monthStart
    }
  }, children);
};
var MonthlyNav = function MonthlyNav() {
  var _useMonthlyCalendar = useMonthlyCalendar(),
      locale = _useMonthlyCalendar.locale,
      currentMonth = _useMonthlyCalendar.currentMonth,
      onCurrentMonthChange = _useMonthlyCalendar.onCurrentMonthChange;

  return React__default.createElement("div", {
    className: "rc-flex rc-justify-end rc-mb-4"
  }, React__default.createElement("button", {
    onClick: function onClick() {
      return onCurrentMonthChange(dateFns.subMonths(currentMonth, 1));
    },
    className: "rc-cursor-pointer"
  }, "Previous"), React__default.createElement("div", {
    className: "rc-ml-4 rc-mr-4 rc-w-32 rc-text-center",
    "aria-label": "Current Month"
  }, dateFns.format(currentMonth, dateFns.getYear(currentMonth) === dateFns.getYear(new Date()) ? 'LLLL' : 'LLLL yyyy', {
    locale: locale
  })), React__default.createElement("button", {
    onClick: function onClick() {
      return onCurrentMonthChange(dateFns.addMonths(currentMonth, 1));
    },
    className: "rc-cursor-pointer"
  }, "Next"));
};

var daysInWeek = function daysInWeek(_ref) {
  var _locale$localize, _locale$localize2, _locale$localize3, _locale$localize4, _locale$localize5, _locale$localize6, _locale$localize7;

  var _ref$locale = _ref.locale,
      locale$1 = _ref$locale === void 0 ? locale.enUS : _ref$locale;
  return [{
    day: 0,
    label: (_locale$localize = locale$1.localize) == null ? void 0 : _locale$localize.day(0)
  }, {
    day: 1,
    label: (_locale$localize2 = locale$1.localize) == null ? void 0 : _locale$localize2.day(1)
  }, {
    day: 2,
    label: (_locale$localize3 = locale$1.localize) == null ? void 0 : _locale$localize3.day(2)
  }, {
    day: 3,
    label: (_locale$localize4 = locale$1.localize) == null ? void 0 : _locale$localize4.day(3)
  }, {
    day: 4,
    label: (_locale$localize5 = locale$1.localize) == null ? void 0 : _locale$localize5.day(4)
  }, {
    day: 5,
    label: (_locale$localize6 = locale$1.localize) == null ? void 0 : _locale$localize6.day(5)
  }, {
    day: 6,
    label: (_locale$localize7 = locale$1.localize) == null ? void 0 : _locale$localize7.day(6)
  }];
};

var MonthlyBodyContext = /*#__PURE__*/React__default.createContext({});
function useMonthlyBody() {
  return React.useContext(MonthlyBodyContext);
}
var handleOmittedDays = function handleOmittedDays(_ref) {
  var days = _ref.days,
      omitDays = _ref.omitDays,
      locale = _ref.locale;
  var headings = daysInWeek({
    locale: locale
  });
  var daysToRender = days; //omit the headings and days of the week that were passed in

  if (omitDays) {
    headings = daysInWeek({
      locale: locale
    }).filter(function (day) {
      return !omitDays.includes(day.day);
    });
    daysToRender = days.filter(function (day) {
      return !omitDays.includes(dateFns.getDay(day));
    });
  } // omit the padding if an omitted day was before the start of the month


  var firstDayOfMonth = dateFns.getDay(daysToRender[0]);

  if (omitDays) {
    var subtractOmittedDays = omitDays.filter(function (day) {
      return day < firstDayOfMonth;
    }).length;
    firstDayOfMonth = firstDayOfMonth - subtractOmittedDays;
  }

  var padding = new Array(firstDayOfMonth).fill(0);
  return {
    headings: headings,
    daysToRender: daysToRender,
    padding: padding
  };
}; //to prevent these from being purged in production, we make a lookup object

var headingClasses = {
  l3: 'lg:rc-grid-cols-3',
  l4: 'lg:rc-grid-cols-4',
  l5: 'lg:rc-grid-cols-5',
  l6: 'lg:rc-grid-cols-6',
  l7: 'lg:rc-grid-cols-7'
};
function MonthlyBody(_ref2) {
  var omitDays = _ref2.omitDays,
      events = _ref2.events,
      children = _ref2.children;

  var _useMonthlyCalendar = useMonthlyCalendar(),
      days = _useMonthlyCalendar.days,
      locale = _useMonthlyCalendar.locale;

  var _handleOmittedDays = handleOmittedDays({
    days: days,
    omitDays: omitDays,
    locale: locale
  }),
      headings = _handleOmittedDays.headings,
      daysToRender = _handleOmittedDays.daysToRender,
      padding = _handleOmittedDays.padding;

  var headingClassName = 'rc-border-b-2 rc-p-2 rc-border-r-2 lg:rc-block rc-hidden';
  return React__default.createElement("div", {
    className: "rc-bg-white rc-border-l-2 rc-border-t-2"
  }, React__default.createElement("div", {
    className: "rc-grid rc-grid-cols-1 sm:rc-grid-cols-2 md:rc-grid-cols-4 " + //@ts-ignore
    headingClasses["l" + headings.length]
  }, headings.map(function (day) {
    return React__default.createElement("div", {
      key: day.day,
      className: headingClassName,
      "aria-label": "Day of Week"
    }, day.label);
  }), padding.map(function (_, index) {
    return React__default.createElement("div", {
      key: index,
      className: headingClassName,
      "aria-label": "Empty Day"
    });
  }), daysToRender.map(function (day) {
    return React__default.createElement(MonthlyBodyContext.Provider, {
      key: day.toISOString(),
      value: {
        day: day,
        events: events.filter(function (data) {
          return dateFns.isSameDay(data.date, day);
        })
      }
    }, children);
  })));
}
function MonthlyDay(_ref3) {
  var renderDay = _ref3.renderDay;

  var _useMonthlyCalendar2 = useMonthlyCalendar(),
      locale = _useMonthlyCalendar2.locale;

  var _useMonthlyBody = useMonthlyBody(),
      day = _useMonthlyBody.day,
      events = _useMonthlyBody.events;

  var dayNumber = dateFns.format(day, 'd', {
    locale: locale
  });
  return React__default.createElement("div", {
    "aria-label": "Events for day " + dayNumber,
    className: "rc-h-48 rc-p-2 rc-border-b-2 rc-border-r-2"
  }, React__default.createElement("div", {
    className: "rc-flex rc-justify-between"
  }, React__default.createElement("div", {
    className: "rc-font-bold"
  }, dayNumber), React__default.createElement("div", {
    className: "lg:rc-hidden rc-block"
  }, dateFns.format(day, 'EEEE', {
    locale: locale
  }))), React__default.createElement("ul", {
    className: "rc-divide-gray-200 rc-divide-y rc-overflow-hidden rc-max-h-36 rc-overflow-y-auto"
  }, renderDay(events)));
}

var DefaultMonthlyEventItem = function DefaultMonthlyEventItem(_ref) {
  var title = _ref.title,
      date = _ref.date;
  return React__default.createElement("li", {
    className: "rc-py-2"
  }, React__default.createElement("div", {
    className: "rc-flex rc-text-sm rc-flex-1 rc-justify-between"
  }, React__default.createElement("h3", {
    className: "rc-font-medium"
  }, title), React__default.createElement("p", {
    className: "rc-text-gray-500"
  }, date)));
};

var WeeklyContext = /*#__PURE__*/React__default.createContext({});
var useWeeklyCalendar = function useWeeklyCalendar() {
  return React.useContext(WeeklyContext);
};
var WeeklyCalendar = function WeeklyCalendar(_ref) {
  var locale = _ref.locale,
      week = _ref.week,
      children = _ref.children;

  var _useState = React.useState(),
      selectedDay = _useState[0],
      setSelectedDay = _useState[1]; //clear the selected day if the week changes


  React.useEffect(function () {
    setSelectedDay(undefined);
  }, [week]);
  return React__default.createElement(WeeklyContext.Provider, {
    value: {
      locale: locale,
      selectedDay: selectedDay,
      week: dateFns.startOfWeek(week),
      changeSelectedDay: setSelectedDay
    }
  }, children);
};
var WeeklyContainer = function WeeklyContainer(_ref2) {
  var children = _ref2.children;
  return React__default.createElement("div", {
    className: "md:rc-flex md:rc-justify-between"
  }, children);
};

var DayButton = function DayButton(_ref3) {
  var day = _ref3.day;

  var _useWeeklyCalendar = useWeeklyCalendar(),
      locale = _useWeeklyCalendar.locale,
      week = _useWeeklyCalendar.week,
      selectedDay = _useWeeklyCalendar.selectedDay,
      changeSelectedDay = _useWeeklyCalendar.changeSelectedDay;

  var isSelected = selectedDay ? dateFns.getDay(selectedDay) === day.day : false;
  var currentDate = dateFns.setDay(week, day.day, {
    locale: locale
  });
  return React__default.createElement("li", {
    onClick: function onClick() {
      return changeSelectedDay(isSelected ? undefined : currentDate);
    },
    className: "rc-bg-white rc-cursor-pointer",
    "aria-label": "Day of Week"
  }, React__default.createElement("div", {
    className: "rc-rounded-lg rc-border sm:rc-w-36 rc-text-center rc-py-4 " + (isSelected ? 'rc-border-indigo-600' : 'rc-border-gray-300 hover:rc-border-gray-500')
  }, React__default.createElement("p", {
    className: "rc-font-medium rc-text-sm rc-text-gray-800"
  }, day.label, " ", dateFns.format(currentDate, 'do', {
    locale: locale
  }))));
};

var WeeklyDays = function WeeklyDays(_ref4) {
  var omitDays = _ref4.omitDays;

  var _useWeeklyCalendar2 = useWeeklyCalendar(),
      locale = _useWeeklyCalendar2.locale;

  var daysToRender = daysInWeek({
    locale: locale
  });

  if (omitDays) {
    daysToRender = daysInWeek({
      locale: locale
    }).filter(function (day) {
      return !omitDays.includes(day.day);
    });
  }

  return React__default.createElement("ul", {
    className: "rc-grid md:rc-grid-cols-1 rc-grid-cols-2 rc-gap-2"
  }, daysToRender.map(function (day) {
    return React__default.createElement(DayButton, {
      key: day.day,
      day: day
    });
  }));
};
function WeeklyBody(_ref5) {
  var events = _ref5.events,
      renderItem = _ref5.renderItem,
      style = _ref5.style;

  var _useWeeklyCalendar3 = useWeeklyCalendar(),
      week = _useWeeklyCalendar3.week,
      selectedDay = _useWeeklyCalendar3.selectedDay;

  return React__default.createElement("div", {
    className: "rc-overflow-auto rc-max-h-96",
    style: style
  }, React__default.createElement("ul", {
    className: "rc-divide-y rc-divide-gray-200 "
  }, events.map(function (item) {
    // If they select a single day, filter out events for different days
    if (selectedDay) {
      if (!dateFns.isSameDay(selectedDay, item.date)) return null;
    } //if an event is for a different week, filter it out


    if (!dateFns.isSameWeek(week, item.date)) return null; //return the remeaining events!

    return renderItem({
      item: item,
      showingFullWeek: selectedDay === undefined
    });
  })));
}
var WeeklyResponsiveContainer = function WeeklyResponsiveContainer(_ref6) {
  var children = _ref6.children;
  return React__default.createElement("div", {
    className: "rc-border rc-p-4 md:rc-w-3/4 lg:rc-w-1/2 rc-w-full"
  }, children);
};

var DefaultWeeklyEventItem = function DefaultWeeklyEventItem(_ref) {
  var title = _ref.title,
      date = _ref.date;
  return React__default.createElement("li", {
    className: "rc-py-4 rc-w-72"
  }, React__default.createElement("div", {
    className: "rc-text-sm rc-flex rc-justify-between"
  }, React__default.createElement("h3", {
    className: "rc-font-medium"
  }, title), React__default.createElement("p", {
    className: "rc-text-gray-500"
  }, date)));
};

exports.DefaultMonthlyEventItem = DefaultMonthlyEventItem;
exports.DefaultWeeklyEventItem = DefaultWeeklyEventItem;
exports.MonthlyBody = MonthlyBody;
exports.MonthlyCalendar = MonthlyCalendar;
exports.MonthlyDay = MonthlyDay;
exports.MonthlyNav = MonthlyNav;
exports.WeeklyBody = WeeklyBody;
exports.WeeklyCalendar = WeeklyCalendar;
exports.WeeklyContainer = WeeklyContainer;
exports.WeeklyDays = WeeklyDays;
exports.WeeklyResponsiveContainer = WeeklyResponsiveContainer;
exports.handleOmittedDays = handleOmittedDays;
exports.useMonthlyBody = useMonthlyBody;
exports.useMonthlyCalendar = useMonthlyCalendar;
exports.useWeeklyCalendar = useWeeklyCalendar;
//# sourceMappingURL=react-calendar.cjs.development.js.map
